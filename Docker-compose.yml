services:

  #Config-Server
  config-server:
    build:
      context: ./Config-Server
    image: config-server
    container_name: config-server
    ports:
      - "8888:8888"
    volumes:
      - ./Config-Server/config-repo:/config-repo
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  #Eureka-Server
  eureka:
    build:
      context: ./Eureka-Server
    image: eureka-server
    container_name: eureka
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
    networks:
      - mynetwork

  #Api-gateway
  api-gateway:
    build:
      context: ./API_Gateway
    image: api-gateway
    container_name: api-gateway
    ports:
      - "8081:8081"
    depends_on:
      - eureka
      - config-server
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka:8761/eureka/
    networks:
      - mynetwork

  #Front-End
  angular-frontend:
    build: 
      context: ./Front-End
      dockerfile: Dockerfile
    image: angular-frontend
    container_name: angular-frontend
    ports:
      - "4200:4200"
    networks:
      - mynetwork
    restart: unless-stopped
    depends_on:
      - api-gateway
    environment:
      - API_URL=http://api-gateway:8081

  #Reclamation_db
  db:
    image: mysql:8
    container_name: mysql-container
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: reclamation_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5

 
 
 
  #Reclamation-Service
  reclamation-service:
    build:
      context: ./Reclamation_Service
    image: reclamation-service
    container_name: reclamation-service
    ports:
      - "8082:8082"
    depends_on:
      - db
      - config-server
      - eureka
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka:8761/eureka/
      # Variables minimales nécessaires pour la connexion à la base de données
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/reclamation_db?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
    networks:
      - mynetwork

  
  
  
  #Commandes-Service
  commande-service:
    build:
      context: ./Commandes_Service
    image: commande-service
    container_name: commande-service
    ports:
      - "8090:8090"
    depends_on:
      - mongodb
      - config-server
      - eureka
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka:8761/eureka/
      # Variable minimale nécessaire pour MongoDB
      SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017/CommandesDB
    networks:
      - mynetwork
  
  
  
  #Users-Service
  user-service:
    build:
      context: ./User_Service
    image: user-service
    container_name: user-service
    ports:
      - "8083:8083"
    depends_on:
      - mongodb
      - config-server
      - eureka
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka:8761/eureka/
      # Variable minimale nécessaire pour MongoDB
      SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017/UsersDB
    networks:
      - mynetwork
 
 
  #MongoDB Pour Commandes&Users-Service
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    networks:
      - mynetwork
    volumes:
      - mongo_data:/data/db

  #Prometheus
  restaurant-prometheus:
    image: prom/prometheus:latest
    container_name: restaurant-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - mynetwork
    depends_on:
      - api-gateway

  #Grafana
  restaurant-grafana:
    image: grafana/grafana:latest
    container_name: restaurant-grafana
    ports:
      - "3005:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - mynetwork
    depends_on:
      - restaurant-prometheus

# Volumes pour la persistance des données
volumes:
  mysql_data:
    driver: local
  mongo_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Réseau pour la communication entre les conteneurs
networks:
  mynetwork:
    driver: bridge