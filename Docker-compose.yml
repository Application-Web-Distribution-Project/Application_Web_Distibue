services:


  notification-service:
    build:
      context: ./Notification_service
    container_name: notification-service
    ports:
      - "8091:8091"
    environment:
      - PORT=8091
      - KAFKA_BROKERS=kafka:9092
      - EUREKA_HOST=eureka
      - EUREKA_PORT=8761
      - EMAIL_SERVICE=gmail
      - EMAIL_USER=Marwaniwael88@gmail.com
      - EMAIL_PASSWORD=vhgt kjkc gkbi rbkr
      - EMAIL_FROM=Marwaniwael88@gmail.com
      - NODE_ENV=development
    networks:
      - mynetwork
    depends_on:
      - kafka
      - eureka
    restart: on-failure
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8091/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - mynetwork
      
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - mynetwork


  #Config-Server
  config-server:
    build:
      context: ./Config-Server
    image: config-server
    container_name: config-server
    ports:
      - "8888:8888"
    volumes:
      - ./Config-Server/config-repo:/config-repo
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  #Eureka-Server
  eureka:
    build:
      context: ./Eureka-Server
    image: eureka-server
    container_name: eureka
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
    networks:
      - mynetwork

  #Api-gateway
  api-gateway:
    build:
      context: ./API_Gateway
    image: api-gateway
    container_name: api-gateway
    ports:
      - "8081:8081"
    depends_on:
      - eureka
      - config-server
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka:8761/eureka/
    networks:
      - mynetwork

  #Front-End
  angular-frontend:
    build: 
      context: ./Front-End
      dockerfile: Dockerfile
    image: angular-frontend
    container_name: angular-frontend
    ports:
      - "4200:4200"
    networks:
      - mynetwork
    restart: unless-stopped
    depends_on:
      - api-gateway
    environment:
      - API_URL=http://api-gateway:8081

  #Reclamation_db
  db:
    image: mysql:8
    container_name: mysql-container
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: reclamation_db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
    ports:
      - "3307:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot"]
      interval: 10s
      timeout: 5s
      retries: 5

 
 
 
  #Reclamation-Service
  reclamation-service:
    build:
      context: ./Reclamation_Service
    image: reclamation-service
    container_name: reclamation-service
    ports:
      - "8082:8082"
    depends_on:
      db:
        condition: service_healthy
      config-server:
        condition: service_healthy
      eureka:
        condition: service_started
      kafka:
        condition: service_started
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka:8761/eureka/
      SPRING_PROFILES_ACTIVE: override
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/reclamation_db?createDatabaseIfNotExist=true&allowPublicKeyRetrieval=true&useSSL=false
      SPRING_DATASOURCE_USERNAME: user
      SPRING_DATASOURCE_PASSWORD: password
      WAIT_HOSTS: config-server:8888,eureka:8761,kafka:9092
      WAIT_TIMEOUT: 300
    networks:
      - mynetwork
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  menu-service:
    build:
      context: ./Menu_Service
    image: menu-service
    container_name: menu-service
    ports:
      - "8084:8084"
    depends_on:
      - menu-h2
      - config-server
      - eureka
    environment:
      SPRING_APPLICATION_NAME: menu-service
      SERVER_PORT: 8084
      SPRING_H2_CONSOLE_ENABLED: "true"
      SPRING_H2_CONSOLE_PATH: /h2
      SPRING_H2_CONSOLE_SETTINGS_WEB_ALLOW_OTHERS: "true"
      SPRING_DATASOURCE_URL: jdbc:h2:file:./data/Menu
      SPRING_DATASOURCE_USERNAME: Nassim
      SPRING_DATASOURCE_PASSWORD:
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.h2.Driver
      SPRING_JPA_HIBERNATE_DDL_AUTO: create
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka:8761/eureka/
    volumes:
      - ./Menu_Service/data:/app/data
    networks:
      - mynetwork

  #Commandes-Service
  commande-service:
    build:
      context: ./Commandes_Service
    image: commande-service
    container_name: commande-service
    ports:
      - "8090:8090"
    depends_on:
      - mongodb
      - config-server
      - eureka
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka:8761/eureka/
      # Variable minimale nécessaire pour MongoDB
      SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017/CommandesDB
    networks:
      - mynetwork
  
  
  
  #Users-Service
  user-service:
    build:
      context: ./User_Service
    image: user-service
    container_name: user-service
    ports:
      - "8083:8083"
    depends_on:
      - mongodb
      - config-server
      - eureka
    environment:
      CONFIG_SERVER_URL: http://config-server:8888
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka:8761/eureka/
      # Variable minimale nécessaire pour MongoDB
      SPRING_DATA_MONGODB_URI: mongodb://mongodb:27017/UsersDB
    networks:
      - mynetwork
 
 
  #MongoDB Pour Commandes&Users-Service
  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    networks:
      - mynetwork
    volumes:
      - mongo_data:/data/db

  #H2 Database for Menu Service
  menu-h2:
    image: oscarfonts/h2
    container_name: menu-h2
    ports:
      - "8092:8082" # Web console port (external:internal)
      - "9092:9092" # TCP server port
    environment:
      - H2_OPTIONS=-ifNotExists
    volumes:
      - menu_h2_data:/opt/h2-data
    networks:
      - mynetwork

  #Prometheus
  restaurant-prometheus:
    image: prom/prometheus:latest
    container_name: restaurant-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - mynetwork
    depends_on:
      - api-gateway

  #Grafana
  restaurant-grafana:
    image: grafana/grafana:latest
    container_name: restaurant-grafana
    ports:
      - "3005:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - mynetwork
    depends_on:
      - restaurant-prometheus

  #PostgreSQL for Livraison Service
  postgres-livraison:
    image: postgres:14
    container_name: postgres-livraison
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: livraisonGestion
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 0000
    volumes:
      - postgres_livraison_data:/var/lib/postgresql/data
    networks:
      - mynetwork
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  #Livraison-Service
  livraison-service:
    build:
      context: ./LivraisonService
    image: livraison-service
    container_name: livraison-service
    ports:
      - "8085:8085"
    depends_on:
      - postgres-livraison
      - config-server
      - eureka
      
    environment:
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka:8761/eureka/
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-livraison:5432/livraisonGestion
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: 0000
      SERVER_PORT: 8085
    networks:
      - mynetwork

  

# Volumes pour la persistance des données
volumes:
  mysql_data:
    driver: local
  mongo_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  menu_h2_data:
    driver: local
  postgres_livraison_data:
    driver: local

# Réseau pour la communication entre les conteneurs
networks:
  mynetwork:
    driver: bridge